/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AccountUpdate
 */
export interface AccountUpdate {
    /**
     * 
     * @type {number}
     * @memberof AccountUpdate
     */
    readonly id?: number;
    /**
     * Name of the account. Lowercase and no spaces or leading numbers. Will be used in URLS e.g. https://hub.stenci.la/awesome-org
     * @type {string}
     * @memberof AccountUpdate
     */
    name: string;
    /**
     * The user for this account. Only applies to personal accounts.
     * @type {number}
     * @memberof AccountUpdate
     */
    user?: number | null;
    /**
     * The user who created the account.
     * @type {number}
     * @memberof AccountUpdate
     */
    readonly creator?: number;
    /**
     * The time the account was created.
     * @type {Date}
     * @memberof AccountUpdate
     */
    readonly created?: Date;
    /**
     * Name to display in account profile.
     * @type {string}
     * @memberof AccountUpdate
     */
    displayName?: string | null;
    /**
     * Location to display in account profile.
     * @type {string}
     * @memberof AccountUpdate
     */
    location?: string | null;
    /**
     * Image for the account.
     * @type {string}
     * @memberof AccountUpdate
     */
    readonly image?: string | null;
    /**
     * URL to display in account profile.
     * @type {string}
     * @memberof AccountUpdate
     */
    website?: string | null;
    /**
     * An email to display in account profile. Will not be used by Stencila to contact you.
     * @type {string}
     * @memberof AccountUpdate
     */
    email?: string | null;
    /**
     * The default theme for the account.
     * @type {string}
     * @memberof AccountUpdate
     */
    theme?: AccountUpdateThemeEnum;
    /**
     * Content to inject into the <head> element of HTML served for this account.
     * @type {string}
     * @memberof AccountUpdate
     */
    extraHead?: string | null;
    /**
     * Content to inject at the top of the <body> element of HTML served for this account.
     * @type {string}
     * @memberof AccountUpdate
     */
    extraTop?: string | null;
    /**
     * Content to inject at the bottom of the <body> element of HTML served for this account.
     * @type {string}
     * @memberof AccountUpdate
     */
    extraBottom?: string | null;
    /**
     * A space separated list of valid hosts for the account. Used for setting Content Security Policy headers when serving content for this account.
     * @type {string}
     * @memberof AccountUpdate
     */
    hosts?: string | null;
    /**
     * Your first names (given names).
     * @type {string}
     * @memberof AccountUpdate
     */
    firstName?: string;
    /**
     * Your last names (family names, surnames).
     * @type {string}
     * @memberof AccountUpdate
     */
    lastName?: string;
}

export function AccountUpdateFromJSON(json: any): AccountUpdate {
    return AccountUpdateFromJSONTyped(json, false);
}

export function AccountUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'theme': !exists(json, 'theme') ? undefined : json['theme'],
        'extraHead': !exists(json, 'extraHead') ? undefined : json['extraHead'],
        'extraTop': !exists(json, 'extraTop') ? undefined : json['extraTop'],
        'extraBottom': !exists(json, 'extraBottom') ? undefined : json['extraBottom'],
        'hosts': !exists(json, 'hosts') ? undefined : json['hosts'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
    };
}

export function AccountUpdateToJSON(value?: AccountUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'user': value.user,
        'displayName': value.displayName,
        'location': value.location,
        'website': value.website,
        'email': value.email,
        'theme': value.theme,
        'extraHead': value.extraHead,
        'extraTop': value.extraTop,
        'extraBottom': value.extraBottom,
        'hosts': value.hosts,
        'firstName': value.firstName,
        'lastName': value.lastName,
    };
}

/**
* @export
* @enum {string}
*/
export enum AccountUpdateThemeEnum {
    Bootstrap = 'bootstrap',
    Elife = 'elife',
    F1000 = 'f1000',
    Galleria = 'galleria',
    Giga = 'giga',
    Latex = 'latex',
    Nature = 'nature',
    Plos = 'plos',
    Rpng = 'rpng',
    Skeleton = 'skeleton',
    Stencila = 'stencila',
    Tufte = 'tufte',
    Wilmore = 'wilmore'
}


