server {
  # Listen on production port so in development can
  # run container using `--net host` for internal redirects
  listen 9000;

  # Do not merge slashes in URL paths 
  # e.g http://hub.stenci.la/open/github://user/repo/
  merge_slashes off;

  # Custom error pages for proxying errors.
  # 502 and 504 errors are usually caused by a failiures of upstream
  # services (e.g. a timeout) but may not be reported by those services.
  # This custom error page avoids the default AND embeds Javascript to
  # trigger an exception report.
  error_page 502 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
    internal;
  }

  # Access to the monitor's HTTP API and graphing 
  # interface
  location /internal/monitor {
    proxy_pass ${MONITOR_URL};
  }

  location @jobs-connect {
    # Internal proxy URL to jobs to be used with `X-Accel-Redirect`
    # to restrict access.
    internal;

    # This approach, using a named location and setting an additional
    # header `X-Accel-Redirect-URL` is necessary to be able to use HTTP
    # to connect because it will preserve HTTP methods other than GET i.e POST.
    # That may not necessary for WebSockets (?) but nonetheless it is useful to
    # be able to use HTTP to make requests to the job session (especially
    # for debugging).
    # See https://serverfault.com/a/838447
    set $url $upstream_http_x_accel_redirect_url;
    proxy_pass $url;

    # Pass on the upgrade header for Websocket support
    proxy_set_header Upgrade $http_upgrade;

    # Reset the authorization header to avoid sending a non-JWT
    # token to the session. In the future, this may be used
    # to send an actual JWT with claims for the user.
    proxy_set_header Authorization "";
    proxy_pass_header Authorization;
  }

  location @jobs-broker {
    # Internal proxy URL to the job queue broker to be used with `X-Accel-Redirect`
    # to restrict access.
    internal;

    # Until we set up a HTTP compatible messaging protocol e.g. STOMP
    # This just echos back the proxy_pass URL
    set $url $upstream_http_x_accel_redirect_url;
    return 302 $url;
  }

  location / {
    # Proxy everything else to director
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Scheme $scheme;
    proxy_pass http://${DIRECTOR_HOST};
  }
}
