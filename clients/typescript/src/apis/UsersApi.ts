/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */

import * as runtime from '../runtime';
import {
    InlineResponse20015,
    InlineResponse20015FromJSON,
    InlineResponse20015ToJSON,
    Me,
    MeFromJSON,
    MeToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface UsersListRequest {
    limit?: number;
    offset?: number;
    search?: string;
}

export interface UsersReadRequest {
    id: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * The optional `search` parameter is a search string used to filter user. Returns details on each user.
     * List users.
     */
    async usersListRaw(requestParameters: UsersListRequest): Promise<runtime.ApiResponse<InlineResponse20015>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20015FromJSON(jsonValue));
    }

    /**
     * The optional `search` parameter is a search string used to filter user. Returns details on each user.
     * List users.
     */
    async usersList(requestParameters: UsersListRequest): Promise<InlineResponse20015> {
        const response = await this.usersListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns details of the user who is currently authenticated.
     * Retrieve the current user.
     */
    async usersMeRaw(): Promise<runtime.ApiResponse<Me>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/users/me/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeFromJSON(jsonValue));
    }

    /**
     * Returns details of the user who is currently authenticated.
     * Retrieve the current user.
     */
    async usersMe(): Promise<Me> {
        const response = await this.usersMeRaw();
        return await response.value();
    }

    /**
     * Returns details of the user.
     * Retrieve a user.
     */
    async usersReadRaw(requestParameters: UsersReadRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Returns details of the user.
     * Retrieve a user.
     */
    async usersRead(requestParameters: UsersReadRequest): Promise<User> {
        const response = await this.usersReadRaw(requestParameters);
        return await response.value();
    }

}
