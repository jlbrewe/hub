server {
  # Listen on production port so in development can
  # run container using `--net host` for internal redirects
  listen 9000;

  # Do not merge slashes in URL paths 
  # e.g http://hub.stenci.la/open/github://user/repo/
  merge_slashes off;

  # Custom error pages for proxying errors.
  # 502 and 504 errors are usually caused by a failiures of upstream
  # services (e.g. a timeout) but may not be reported by those services.
  # This custom error page avoids the default AND embeds Javascript to
  # trigger an exception report.
  error_page 502 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
    internal;
  }

  # Access to the monitor's HTTP API and graphing 
  # interface
  location /internal/monitor {
    proxy_pass ${MONITOR_URL};
  }

  location @jobs-connect {
    # Internal proxy URL to jobs to be used with `X-Accel-Redirect`
    # to restrict access.
    internal;

    # Pass on the upgrade header for Websocket support
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";

    # Reset the authorization header to avoid sending a non-JWT
    # token to the session. In the future, this may be used
    # to send an actual JWT with claims for the user.
    proxy_set_header Authorization "";
    proxy_pass_header Authorization;

    # Increase timeouts from the default 60s
    proxy_connect_timeout       300;
    proxy_send_timeout          300;
    proxy_read_timeout          300;

    # This approach, using a named location and setting an additional
    # header `X-Accel-Redirect-URL` is necessary to be able to use HTTP
    # to connect because it will preserve HTTP methods other than GET i.e POST.
    # That may not necessary for WebSockets (?) but nonetheless it is useful to
    # be able to use HTTP to make requests to the job session (especially
    # for debugging).
    # See https://serverfault.com/a/838447
    set $url $upstream_http_x_accel_redirect_url;
    proxy_pass $url;
  }

  location @jobs-broker {
    # Internal proxy URL to the job queue broker to be used with `X-Accel-Redirect`
    # to restrict access.
    internal;

    # Until we set up a HTTP compatible messaging protocol e.g. STOMP
    # This just echos back the proxy_pass URL
    set $url $upstream_http_x_accel_redirect_url;
    return 302 $url;
  }

  location / {
    # Proxy everything else to the `manager` service
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Scheme $scheme;
    proxy_pass http://${MANAGER_HOST};
  }
}

server {
  # Serve `<account>.stencila.io/<project>` 

  listen 9000;
  server_name *.stencila.io;

  # Robots, favicon, static assets (needed for error pages)
  # just get proxied through.
  location ~ ^/(robots.txt|favicon.ico|static) {
    proxy_set_header Host $http_host;
    proxy_pass http://${MANAGER_HOST}$request_uri;
  }

  # Proxy all other requests get "rewritten" to the
  # manager's `/content` URL.
  location / {
    proxy_set_header Host $http_host;
    proxy_pass http://${MANAGER_HOST}/content$request_uri;
  }

  location @account-content {
    # Internal reverse-proxy to account content URLs as returned
    # by the `manager`.
    internal;

    # Unset Authorization and Cookie for security reasons.
    proxy_set_header Authorization '';
    proxy_set_header Cookie '';

    # DNS resolver required for the following proxy pass
    # if it is to a remote domain.
    resolver ${RESOLVER_ADDRESS} ipv6=off;

    # Proxy it!
    set $url $upstream_http_x_accel_redirect_url;
    proxy_pass $url;

    # Handle any redirects from upstream
    proxy_intercept_errors on;
    error_page 301 302 307 = @handle_redirect;
  }

  location @handle_redirect {
    resolver ${RESOLVER_ADDRESS} ipv6=off;

    set $location $upstream_http_location;
    proxy_pass $location;
  }
}
