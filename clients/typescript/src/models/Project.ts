/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    readonly id?: number;
    /**
     * Account that the project belongs to.
     * @type {number}
     * @memberof Project
     */
    account?: number;
    /**
     * The user who created the project.
     * @type {number}
     * @memberof Project
     */
    creator?: number | null;
    /**
     * The time the project was created.
     * @type {Date}
     * @memberof Project
     */
    readonly created?: Date;
    /**
     * Name of the project. Lowercase only and unique for the account. Will be used in URLS e.g. https://hub.stenci.la/awesome-org/great-project.
     * @type {string}
     * @memberof Project
     */
    name: string;
    /**
     * Title of the project to display in its profile.
     * @type {string}
     * @memberof Project
     */
    title?: string | null;
    /**
     * Brief description of the project.
     * @type {string}
     * @memberof Project
     */
    description?: string | null;
    /**
     * Is the project temporary?
     * @type {boolean}
     * @memberof Project
     */
    temporary?: boolean;
    /**
     * Is the project publicly visible?
     * @type {boolean}
     * @memberof Project
     */
    _public?: boolean;
    /**
     * A unique, and very difficult to guess, key to access this project if it is not public.
     * @type {string}
     * @memberof Project
     */
    key?: string;
    /**
     * Path of the main file of the project
     * @type {string}
     * @memberof Project
     */
    main?: string | null;
    /**
     * The name of the theme to use as the default when generating content for this project.
     * @type {string}
     * @memberof Project
     */
    theme?: ProjectThemeEnum;
    /**
     * Content to inject into the <head> element of HTML served for this project.
     * @type {string}
     * @memberof Project
     */
    extraHead?: string | null;
    /**
     * Content to inject at the top of the <body> element of HTML served for this project.
     * @type {string}
     * @memberof Project
     */
    extraTop?: string | null;
    /**
     * Content to inject at the bottom of the <body> element of HTML served for this project.
     * @type {string}
     * @memberof Project
     */
    extraBottom?: string | null;
    /**
     * Where to serve the content for this project from.
     * @type {string}
     * @memberof Project
     */
    liveness?: ProjectLivenessEnum;
    /**
     * If pinned, the snapshot to pin to, when serving content.
     * @type {string}
     * @memberof Project
     */
    pinned?: string | null;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'account': !exists(json, 'account') ? undefined : json['account'],
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'name': json['name'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'temporary': !exists(json, 'temporary') ? undefined : json['temporary'],
        '_public': !exists(json, 'public') ? undefined : json['public'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'main': !exists(json, 'main') ? undefined : json['main'],
        'theme': !exists(json, 'theme') ? undefined : json['theme'],
        'extraHead': !exists(json, 'extraHead') ? undefined : json['extraHead'],
        'extraTop': !exists(json, 'extraTop') ? undefined : json['extraTop'],
        'extraBottom': !exists(json, 'extraBottom') ? undefined : json['extraBottom'],
        'liveness': !exists(json, 'liveness') ? undefined : json['liveness'],
        'pinned': !exists(json, 'pinned') ? undefined : json['pinned'],
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account': value.account,
        'creator': value.creator,
        'name': value.name,
        'title': value.title,
        'description': value.description,
        'temporary': value.temporary,
        'public': value._public,
        'key': value.key,
        'main': value.main,
        'theme': value.theme,
        'extraHead': value.extraHead,
        'extraTop': value.extraTop,
        'extraBottom': value.extraBottom,
        'liveness': value.liveness,
        'pinned': value.pinned,
    };
}

/**
* @export
* @enum {string}
*/
export enum ProjectThemeEnum {
    Bootstrap = 'bootstrap',
    Elife = 'elife',
    F1000 = 'f1000',
    Galleria = 'galleria',
    Giga = 'giga',
    Latex = 'latex',
    Nature = 'nature',
    Plos = 'plos',
    Rpng = 'rpng',
    Skeleton = 'skeleton',
    Stencila = 'stencila',
    Tufte = 'tufte',
    Wilmore = 'wilmore'
}
/**
* @export
* @enum {string}
*/
export enum ProjectLivenessEnum {
    Live = 'live',
    Latest = 'latest',
    Pinned = 'pinned'
}


