/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */

import * as runtime from '../runtime';
import {
    InlineResponse2007,
    InlineResponse2007FromJSON,
    InlineResponse2007ToJSON,
    Invite,
    InviteFromJSON,
    InviteToJSON,
} from '../models';

export interface InvitesCreateRequest {
    data: Invite;
}

export interface InvitesDeleteRequest {
    id: string;
}

export interface InvitesListRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class InvitesApi extends runtime.BaseAPI {

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async invitesCreateRaw(requestParameters: InvitesCreateRequest): Promise<runtime.ApiResponse<Invite>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling invitesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/invites/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InviteToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InviteFromJSON(jsonValue));
    }

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async invitesCreate(requestParameters: InvitesCreateRequest): Promise<Invite> {
        const response = await this.invitesCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an empty response.
     * Destroy an object.
     */
    async invitesDeleteRaw(requestParameters: InvitesDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling invitesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/invites/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an empty response.
     * Destroy an object.
     */
    async invitesDelete(requestParameters: InvitesDeleteRequest): Promise<void> {
        await this.invitesDeleteRaw(requestParameters);
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async invitesListRaw(requestParameters: InvitesListRequest): Promise<runtime.ApiResponse<InlineResponse2007>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/invites/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async invitesList(requestParameters: InvitesListRequest): Promise<InlineResponse2007> {
        const response = await this.invitesListRaw(requestParameters);
        return await response.value();
    }

}
