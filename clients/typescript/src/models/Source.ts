/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {number}
     * @memberof Source
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    readonly type?: string;
    /**
     * The address of the source. e.g. github://org/repo/subpath
     * @type {string}
     * @memberof Source
     */
    readonly address?: string;
    /**
     * The path that the source is mapped to in the project.
     * @type {string}
     * @memberof Source
     */
    path: string;
    /**
     * The time the source was created.
     * @type {Date}
     * @memberof Source
     */
    readonly created?: Date;
    /**
     * The time the source was last changed.
     * @type {Date}
     * @memberof Source
     */
    readonly updated?: Date;
    /**
     * The user who created the source.
     * @type {number}
     * @memberof Source
     */
    readonly creator?: number;
}

export function SourceFromJSON(json: any): Source {
    return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Source {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'path': json['path'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
    };
}

export function SourceToJSON(value?: Source | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
    };
}


