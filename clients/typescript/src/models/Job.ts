/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * An autoincrementing integer to allow selecting jobs in the order they were created.
     * @type {number}
     * @memberof Job
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    readonly statusMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    readonly summaryString?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    readonly runtimeFormatted?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    readonly url?: string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    readonly position?: number;
    /**
     * 
     * @type {Set<number>}
     * @memberof Job
     */
    readonly children?: Set<number>;
    /**
     * A unique, and very difficult to guess, key to access the job with.
     * @type {string}
     * @memberof Job
     */
    key?: string;
    /**
     * A short description of the job.
     * @type {string}
     * @memberof Job
     */
    description?: string | null;
    /**
     * The time the job was created.
     * @type {Date}
     * @memberof Job
     */
    readonly created?: Date;
    /**
     * The time the job was last updated.
     * @type {Date}
     * @memberof Job
     */
    readonly updated?: Date;
    /**
     * The time the job began.
     * @type {Date}
     * @memberof Job
     */
    began?: Date | null;
    /**
     * The time the job ended.
     * @type {Date}
     * @memberof Job
     */
    ended?: Date | null;
    /**
     * The current status of the job.
     * @type {string}
     * @memberof Job
     */
    status?: JobStatusEnum;
    /**
     * Is the job active?
     * @type {boolean}
     * @memberof Job
     */
    isActive?: boolean;
    /**
     * The job method.
     * @type {string}
     * @memberof Job
     */
    method: JobMethodEnum;
    /**
     * The parameters of the job; a JSON object.
     * @type {string}
     * @memberof Job
     */
    params?: string | null;
    /**
     * The result of the job; a JSON value.
     * @type {string}
     * @memberof Job
     */
    result?: string | null;
    /**
     * Any error associated with the job; a JSON object with type, message etc.
     * @type {string}
     * @memberof Job
     */
    error?: string | null;
    /**
     * The job log; a JSON array of log objects, including any errors.
     * @type {string}
     * @memberof Job
     */
    log?: string | null;
    /**
     * The running time of the job.
     * @type {number}
     * @memberof Job
     */
    runtime?: number | null;
    /**
     * The identifier of the worker that ran the job.
     * @type {string}
     * @memberof Job
     */
    worker?: string | null;
    /**
     * The number of retries to fulfil the job.
     * @type {number}
     * @memberof Job
     */
    retries?: number | null;
    /**
     * The id of the object to call back.
     * @type {string}
     * @memberof Job
     */
    callbackId?: string | null;
    /**
     * The name of the method to call back.
     * @type {string}
     * @memberof Job
     */
    callbackMethod?: string | null;
    /**
     * The project this job is associated with.
     * @type {number}
     * @memberof Job
     */
    project?: number | null;
    /**
     * The snapshot that this job is associated with. Usually `session` jobs for the snapshot.
     * @type {string}
     * @memberof Job
     */
    snapshot?: string | null;
    /**
     * The user who created the job.
     * @type {number}
     * @memberof Job
     */
    creator?: number | null;
    /**
     * The queue that this job was routed to
     * @type {number}
     * @memberof Job
     */
    queue?: number | null;
    /**
     * The parent job
     * @type {number}
     * @memberof Job
     */
    parent?: number | null;
    /**
     * The type of the object to call back.
     * @type {number}
     * @memberof Job
     */
    callbackType?: number | null;
    /**
     * Users who have created or connected to the job; not necessarily currently connected.
     * @type {Set<number>}
     * @memberof Job
     */
    users?: Set<number>;
    /**
     * Anonymous users who have created or connected to the job.
     * @type {Set<string>}
     * @memberof Job
     */
    anonUsers?: Set<string>;
}

export function JobFromJSON(json: any): Job {
    return JobFromJSONTyped(json, false);
}

export function JobFromJSONTyped(json: any, ignoreDiscriminator: boolean): Job {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'statusMessage': !exists(json, 'statusMessage') ? undefined : json['statusMessage'],
        'summaryString': !exists(json, 'summaryString') ? undefined : json['summaryString'],
        'runtimeFormatted': !exists(json, 'runtimeFormatted') ? undefined : json['runtimeFormatted'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'children': !exists(json, 'children') ? undefined : json['children'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (new Date(json['updated'])),
        'began': !exists(json, 'began') ? undefined : (json['began'] === null ? null : new Date(json['began'])),
        'ended': !exists(json, 'ended') ? undefined : (json['ended'] === null ? null : new Date(json['ended'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'method': json['method'],
        'params': !exists(json, 'params') ? undefined : json['params'],
        'result': !exists(json, 'result') ? undefined : json['result'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'log': !exists(json, 'log') ? undefined : json['log'],
        'runtime': !exists(json, 'runtime') ? undefined : json['runtime'],
        'worker': !exists(json, 'worker') ? undefined : json['worker'],
        'retries': !exists(json, 'retries') ? undefined : json['retries'],
        'callbackId': !exists(json, 'callbackId') ? undefined : json['callbackId'],
        'callbackMethod': !exists(json, 'callbackMethod') ? undefined : json['callbackMethod'],
        'project': !exists(json, 'project') ? undefined : json['project'],
        'snapshot': !exists(json, 'snapshot') ? undefined : json['snapshot'],
        'creator': !exists(json, 'creator') ? undefined : json['creator'],
        'queue': !exists(json, 'queue') ? undefined : json['queue'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'callbackType': !exists(json, 'callbackType') ? undefined : json['callbackType'],
        'users': !exists(json, 'users') ? undefined : json['users'],
        'anonUsers': !exists(json, 'anonUsers') ? undefined : json['anonUsers'],
    };
}

export function JobToJSON(value?: Job | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'key': value.key,
        'description': value.description,
        'began': value.began === undefined ? undefined : (value.began === null ? null : value.began.toISOString()),
        'ended': value.ended === undefined ? undefined : (value.ended === null ? null : value.ended.toISOString()),
        'status': value.status,
        'isActive': value.isActive,
        'method': value.method,
        'params': value.params,
        'result': value.result,
        'error': value.error,
        'log': value.log,
        'runtime': value.runtime,
        'worker': value.worker,
        'retries': value.retries,
        'callbackId': value.callbackId,
        'callbackMethod': value.callbackMethod,
        'project': value.project,
        'snapshot': value.snapshot,
        'creator': value.creator,
        'queue': value.queue,
        'parent': value.parent,
        'callbackType': value.callbackType,
        'users': value.users,
        'anonUsers': value.anonUsers,
    };
}

/**
* @export
* @enum {string}
*/
export enum JobStatusEnum {
    Waiting = 'WAITING',
    Dispatched = 'DISPATCHED',
    Pending = 'PENDING',
    Received = 'RECEIVED',
    Started = 'STARTED',
    Running = 'RUNNING',
    Success = 'SUCCESS',
    Failure = 'FAILURE',
    Cancelled = 'CANCELLED',
    Revoked = 'REVOKED',
    Terminated = 'TERMINATED',
    Rejected = 'REJECTED',
    Retry = 'RETRY'
}
/**
* @export
* @enum {string}
*/
export enum JobMethodEnum {
    Parallel = 'parallel',
    Series = 'series',
    Chain = 'chain',
    Clean = 'clean',
    Archive = 'archive',
    Pull = 'pull',
    Push = 'push',
    Decode = 'decode',
    Encode = 'encode',
    Convert = 'convert',
    Compile = 'compile',
    Build = 'build',
    Execute = 'execute',
    Session = 'session',
    Sleep = 'sleep'
}


