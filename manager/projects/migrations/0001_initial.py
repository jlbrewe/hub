# Generated by Django 3.0.7 on 2020-06-20 01:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import projects.models.sources


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The time the project was created.')),
                ('name', models.SlugField(help_text='Name of the project. Lowercase only and unique for the account. Will be used in URLS e.g. https://hub.stenci.la/awesome-org/great-project.')),
                ('title', models.CharField(blank=True, help_text='Title of the project to display in its profile.', max_length=256, null=True)),
                ('public', models.BooleanField(default=True, help_text='Should the project be publicly visible?')),
                ('description', models.TextField(blank=True, help_text='Brief description of the project.', null=True)),
                ('theme', models.TextField(blank=True, help_text='The name of the theme to use as the default when generating content for this project.', null=True)),
                ('account', models.ForeignKey(help_text='Account that the project belongs to.', on_delete=django.db.models.deletion.PROTECT, related_name='projects', to='accounts.Account')),
                ('creator', models.ForeignKey(help_text='The user who created the project.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField(help_text='The path that the file or directory from the source is mapped to in the project')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The time the source was created.')),
                ('updated', models.DateTimeField(auto_now=True, help_text='The time the source was last changed')),
                ('creator', models.ForeignKey(blank=True, help_text='The user who created the source.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sources_created', to=settings.AUTH_USER_MODEL)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_projects.source_set+', to='contenttypes.ContentType')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=projects.models.sources.NON_POLYMORPHIC_CASCADE, related_name='sources', to='projects.Project')),
            ],
        ),
        migrations.CreateModel(
            name='ElifeSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('article', models.IntegerField(help_text='The article number.')),
                ('version', models.IntegerField(blank=True, help_text='The article version. If blank, defaults to the latest.', null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='FileSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('size', models.IntegerField(blank=True, help_text='Size of the file in bytes', null=True)),
                ('file', models.FileField(blank=True, help_text='The actual file stored', upload_to=projects.models.sources.files_source_file_path)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='GithubSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('repo', models.CharField(help_text='The Github repository identifier i.e. org/repo', max_length=512)),
                ('subpath', models.CharField(blank=True, help_text='Path to file or folder within the repository', max_length=1024, null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='GoogleDocsSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('doc_id', models.TextField(help_text='The id of the document e.g. 1iNeKTanIcW_92Hmc8qxMkrW2jPrvwjHuANju2hkaYkA')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='GoogleDriveSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('folder_id', models.TextField(help_text="Google's ID of the folder.")),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='PlosSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('article', models.TextField(help_text='The article DOI.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='UrlSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='projects.Source')),
                ('url', models.URLField(help_text='The URL of the remote file.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('projects.source',),
        ),
        migrations.CreateModel(
            name='ProjectAgent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('READER', 'Reader'), ('REVIEWER', 'Reviewer'), ('EDITOR', 'Editor'), ('AUTHOR', 'Author'), ('MANAGER', 'Manager'), ('OWNER', 'Owner')], help_text='Role the user or team has within the project.', max_length=32)),
                ('project', models.ForeignKey(help_text='Project to which the user or team is being given access to.', on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='projects.Project')),
                ('team', models.ForeignKey(blank=True, help_text='A team given access to the project.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='accounts.AccountTeam')),
                ('user', models.ForeignKey(blank=True, help_text='A user given access to the project.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='source',
            constraint=models.UniqueConstraint(fields=('project', 'path'), name='source_unique_project_path'),
        ),
        migrations.AddConstraint(
            model_name='projectagent',
            constraint=models.UniqueConstraint(fields=('project', 'user'), name='projectagent_unique_project_user'),
        ),
        migrations.AddConstraint(
            model_name='projectagent',
            constraint=models.UniqueConstraint(fields=('project', 'team'), name='projectagent_unique_project_team'),
        ),
        migrations.AddConstraint(
            model_name='project',
            constraint=models.UniqueConstraint(fields=('account', 'name'), name='project_unique_account_name'),
        ),
    ]
