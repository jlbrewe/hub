/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {number}
     * @memberof ModelFile
     */
    readonly id?: number;
    /**
     * The path of the file within the project.
     * @type {string}
     * @memberof ModelFile
     */
    path: string;
    /**
     * Is the file currently in the project? Used to retain a history for file paths within a project.
     * @type {boolean}
     * @memberof ModelFile
     */
    current?: boolean;
    /**
     * The time the file info was created.
     * @type {Date}
     * @memberof ModelFile
     */
    readonly created?: Date;
    /**
     * The time the file info was updated. This field will have the last time this row was altered (i.e. changed from current, to not).
     * @type {Date}
     * @memberof ModelFile
     */
    updated?: Date | null;
    /**
     * The file modification time.
     * @type {Date}
     * @memberof ModelFile
     */
    modified?: Date | null;
    /**
     * The size of the file in bytes
     * @type {number}
     * @memberof ModelFile
     */
    size?: number | null;
    /**
     * The mimetype of the file.
     * @type {string}
     * @memberof ModelFile
     */
    mimetype?: string | null;
    /**
     * The encoding of the file e.g. gzip
     * @type {string}
     * @memberof ModelFile
     */
    encoding?: string | null;
    /**
     * The fingerprint of the file
     * @type {string}
     * @memberof ModelFile
     */
    fingerprint?: string | null;
    /**
     * The job that created the file e.g. a source pull or file conversion.
     * @type {number}
     * @memberof ModelFile
     */
    job?: number | null;
    /**
     * The source from which the file came (if any). If the source is removed from the project, so will this file.
     * @type {number}
     * @memberof ModelFile
     */
    source?: number | null;
    /**
     * The snapshot that the file belongs. If the snapshot is deleted so will the files.
     * @type {string}
     * @memberof ModelFile
     */
    snapshot?: string | null;
    /**
     * The files that this file was derived from (if any).
     * @type {Set<number>}
     * @memberof ModelFile
     */
    upstreams: Set<number>;
}

export function ModelFileFromJSON(json: any): ModelFile {
    return ModelFileFromJSONTyped(json, false);
}

export function ModelFileFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelFile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'path': json['path'],
        'current': !exists(json, 'current') ? undefined : json['current'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'updated': !exists(json, 'updated') ? undefined : (json['updated'] === null ? null : new Date(json['updated'])),
        'modified': !exists(json, 'modified') ? undefined : (json['modified'] === null ? null : new Date(json['modified'])),
        'size': !exists(json, 'size') ? undefined : json['size'],
        'mimetype': !exists(json, 'mimetype') ? undefined : json['mimetype'],
        'encoding': !exists(json, 'encoding') ? undefined : json['encoding'],
        'fingerprint': !exists(json, 'fingerprint') ? undefined : json['fingerprint'],
        'job': !exists(json, 'job') ? undefined : json['job'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'snapshot': !exists(json, 'snapshot') ? undefined : json['snapshot'],
        'upstreams': json['upstreams'],
    };
}

export function ModelFileToJSON(value?: ModelFile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'current': value.current,
        'updated': value.updated === undefined ? undefined : (value.updated === null ? null : value.updated.toISOString()),
        'modified': value.modified === undefined ? undefined : (value.modified === null ? null : value.modified.toISOString()),
        'size': value.size,
        'mimetype': value.mimetype,
        'encoding': value.encoding,
        'fingerprint': value.fingerprint,
        'job': value.job,
        'source': value.source,
        'snapshot': value.snapshot,
        'upstreams': value.upstreams,
    };
}


