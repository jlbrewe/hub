/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */

import * as runtime from '../runtime';
import {
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineResponse20014,
    InlineResponse20014FromJSON,
    InlineResponse20014ToJSON,
    InlineResponse201,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON,
} from '../models';

export interface TokensCreateRequest {
    data: InlineObject5;
}

export interface TokensDeleteRequest {
    token: string;
}

export interface TokensListRequest {
    limit?: number;
    offset?: number;
}

export interface TokensReadRequest {
    token: string;
}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI {

    /**
     * Receives a POST with either (a) user\'s username and password, or (b) an OpenID Connect JSON Web Token. Returns the `username`, and an `token` that can be used for authenticated API requests. Currently, only OpenID tokens issued by Google are accepted.
     * Create an authentication token.
     */
    async tokensCreateRaw(requestParameters: TokensCreateRequest): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling tokensCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/tokens/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Receives a POST with either (a) user\'s username and password, or (b) an OpenID Connect JSON Web Token. Returns the `username`, and an `token` that can be used for authenticated API requests. Currently, only OpenID tokens issued by Google are accepted.
     * Create an authentication token.
     */
    async tokensCreate(requestParameters: TokensCreateRequest): Promise<InlineResponse201> {
        const response = await this.tokensCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the token, whether or not is is expired.
     * Destroy an authentication token.
     */
    async tokensDeleteRaw(requestParameters: TokensDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling tokensDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/tokens/{token}/`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the token, whether or not is is expired.
     * Destroy an authentication token.
     */
    async tokensDelete(requestParameters: TokensDeleteRequest): Promise<void> {
        await this.tokensDeleteRaw(requestParameters);
    }

    /**
     * Returns a list of the authentication tokens for the current user. Stencila does not store the raw token only the `id` (the first eight characters).
     * List authentication tokens.
     */
    async tokensListRaw(requestParameters: TokensListRequest): Promise<runtime.ApiResponse<InlineResponse20014>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/tokens/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse20014FromJSON(jsonValue));
    }

    /**
     * Returns a list of the authentication tokens for the current user. Stencila does not store the raw token only the `id` (the first eight characters).
     * List authentication tokens.
     */
    async tokensList(requestParameters: TokensListRequest): Promise<InlineResponse20014> {
        const response = await this.tokensListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns details of the authentication token identified including it\'s new expiry date.
     * Retrieve and refresh an authentication token.
     */
    async tokensReadRaw(requestParameters: TokensReadRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling tokensRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/tokens/{token}/`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Returns details of the authentication token identified including it\'s new expiry date.
     * Retrieve and refresh an authentication token.
     */
    async tokensRead(requestParameters: TokensReadRequest): Promise<Token> {
        const response = await this.tokensReadRaw(requestParameters);
        return await response.value();
    }

}
