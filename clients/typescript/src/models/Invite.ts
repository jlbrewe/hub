/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Invite
 */
export interface Invite {
    /**
     * 
     * @type {number}
     * @memberof Invite
     */
    readonly id?: number;
    /**
     * 
     * @type {string}
     * @memberof Invite
     */
    readonly url?: string;
    /**
     * The key for the invite.
     * @type {string}
     * @memberof Invite
     */
    readonly key?: string;
    /**
     * The email address of the person you are inviting.
     * @type {string}
     * @memberof Invite
     */
    email: string;
    /**
     * An optional message to send to the invitee.
     * @type {string}
     * @memberof Invite
     */
    message?: string | null;
    /**
     * When the invite was created.
     * @type {Date}
     * @memberof Invite
     */
    readonly created?: Date;
    /**
     * When the invite was sent.
     * @type {Date}
     * @memberof Invite
     */
    sent?: Date | null;
    /**
     * Whether the invite has been accepted. Will only be true if the user has clicked on the invitation AND authenticated.
     * @type {boolean}
     * @memberof Invite
     */
    accepted?: boolean;
    /**
     * When the invite action was completed
     * @type {Date}
     * @memberof Invite
     */
    completed?: Date | null;
    /**
     * The action to perform when the invitee signs up.
     * @type {string}
     * @memberof Invite
     */
    action?: InviteActionEnum;
    /**
     * The id of the target of the action.
     * @type {number}
     * @memberof Invite
     */
    subjectId?: number | null;
    /**
     * Any additional arguments to pass to the action.
     * @type {string}
     * @memberof Invite
     */
    arguments?: string | null;
    /**
     * The user who created the invite.
     * @type {number}
     * @memberof Invite
     */
    inviter?: number | null;
    /**
     * The type of the target of the action. e.g Team, Account
     * @type {number}
     * @memberof Invite
     */
    subjectType?: number | null;
}

export function InviteFromJSON(json: any): Invite {
    return InviteFromJSONTyped(json, false);
}

export function InviteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invite {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'email': json['email'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'sent': !exists(json, 'sent') ? undefined : (json['sent'] === null ? null : new Date(json['sent'])),
        'accepted': !exists(json, 'accepted') ? undefined : json['accepted'],
        'completed': !exists(json, 'completed') ? undefined : (json['completed'] === null ? null : new Date(json['completed'])),
        'action': !exists(json, 'action') ? undefined : json['action'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'arguments': !exists(json, 'arguments') ? undefined : json['arguments'],
        'inviter': !exists(json, 'inviter') ? undefined : json['inviter'],
        'subjectType': !exists(json, 'subjectType') ? undefined : json['subjectType'],
    };
}

export function InviteToJSON(value?: Invite | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'message': value.message,
        'sent': value.sent === undefined ? undefined : (value.sent === null ? null : value.sent.toISOString()),
        'accepted': value.accepted,
        'completed': value.completed === undefined ? undefined : (value.completed === null ? null : value.completed.toISOString()),
        'action': value.action,
        'subjectId': value.subjectId,
        'arguments': value.arguments,
        'inviter': value.inviter,
        'subjectType': value.subjectType,
    };
}

/**
* @export
* @enum {string}
*/
export enum InviteActionEnum {
    JoinAccount = 'join_account',
    JoinTeam = 'join_team',
    JoinProject = 'join_project',
    TakeTour = 'take_tour'
}


