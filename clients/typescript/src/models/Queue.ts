/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Queue
 */
export interface Queue {
    /**
     * 
     * @type {number}
     * @memberof Queue
     */
    readonly id?: number;
    /**
     * The name of the queue.
     * @type {string}
     * @memberof Queue
     */
    name: string;
    /**
     * The relative priority of jobs placed on the queue.
     * @type {number}
     * @memberof Queue
     */
    priority?: number;
    /**
     * Whether or not the queue should be sent jobs which run untrusted code.
     * @type {boolean}
     * @memberof Queue
     */
    untrusted?: boolean;
    /**
     * Whether or not the queue should be sent jobs which can not be interupted.False (default): jobs should not be interrupted
     * @type {boolean}
     * @memberof Queue
     */
    interrupt?: boolean;
    /**
     * The zone this job is associated with.
     * @type {number}
     * @memberof Queue
     */
    zone?: number | null;
}

export function QueueFromJSON(json: any): Queue {
    return QueueFromJSONTyped(json, false);
}

export function QueueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Queue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'untrusted': !exists(json, 'untrusted') ? undefined : json['untrusted'],
        'interrupt': !exists(json, 'interrupt') ? undefined : json['interrupt'],
        'zone': !exists(json, 'zone') ? undefined : json['zone'],
    };
}

export function QueueToJSON(value?: Queue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'priority': value.priority,
        'untrusted': value.untrusted,
        'interrupt': value.interrupt,
        'zone': value.zone,
    };
}


