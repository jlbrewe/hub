# Generated by Django 3.0.7 on 2020-06-19 06:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import jsonfallback.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('projects', '0001_initial'),
        ('django_celery_beat', '0012_periodictask_expire_seconds'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PipelineSchedule',
            fields=[
                ('periodictask_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='django_celery_beat.PeriodicTask')),
            ],
            bases=('django_celery_beat.periodictask',),
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the queue.', max_length=512)),
                ('priority', models.IntegerField(default=0, help_text='The relative priority of jobs placed on the queue.')),
                ('untrusted', models.BooleanField(default=False, help_text='Whether or not the queue should be sent jobs which run untrusted code.')),
                ('interrupt', models.BooleanField(default=False, help_text='Whether or not the queue should be sent jobs which can not be interupted.False (default): jobs should not be interrupted')),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The time that the worker started (time of the first event for the worker).')),
                ('started', models.DateTimeField(blank=True, help_text="The time that the worker started (only recorded on a 'worker-online' event).", null=True)),
                ('updated', models.DateTimeField(blank=True, help_text='The time that the last heatbeat was received for the worker.', null=True)),
                ('finished', models.DateTimeField(blank=True, help_text="The time that the worker finished (only recorded on a 'worker-offline' event)", null=True)),
                ('hostname', models.CharField(help_text='The `hostname` of the worker.', max_length=512)),
                ('utcoffset', models.IntegerField(help_text='The `utcoffset` of the worker.')),
                ('pid', models.IntegerField(help_text='The `pid` of the worker.')),
                ('freq', models.FloatField(help_text="The worker's heatbeat frequency (in seconds)")),
                ('software', models.CharField(help_text="The name and version of the worker's software.", max_length=256)),
                ('os', models.CharField(help_text='Operating system that the worker is running on.', max_length=64)),
                ('details', jsonfallback.fields.FallbackJSONField(blank=True, help_text='Details about the worker including queues and statsSee https://docs.celeryproject.org/en/stable/userguide/workers.html#statistics', null=True)),
                ('signature', models.CharField(help_text='The signature of the worker used to identify it. It is possible, but unlikely, that two or more active workers have the same signature.', max_length=512)),
                ('queues', models.ManyToManyField(help_text='The queues that this worker is listening to.', related_name='workers', to='jobs.Queue')),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The identifier of the queue the job was posted to.', max_length=256, validators=[django.core.validators.RegexValidator('^[a-z][a-z0-9\\-]*$', 'Name should start with a lowercase letter and only contain lowercase letters, digits and hyphens')])),
                ('account', models.ForeignKey(help_text='The account that this zone is linked to.', on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='accounts.Account')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerHeartbeat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(help_text='The time of the heartbeat.')),
                ('clock', models.IntegerField(help_text="The tick number of the worker's monotonic clock")),
                ('active', models.IntegerField(help_text='The number of active jobs on the worker.')),
                ('processed', models.IntegerField(help_text='The number of jobs that have been processed by the worker.')),
                ('load', jsonfallback.fields.FallbackJSONField(help_text='An array of the system load over the last 1, 5 and 15 minutes. From os.getloadavg().')),
                ('worker', models.ForeignKey(help_text='The worker that the heartbeat is for.', on_delete=django.db.models.deletion.CASCADE, related_name='heartbeats', to='jobs.Worker')),
            ],
        ),
        migrations.AddField(
            model_name='queue',
            name='zone',
            field=models.ForeignKey(blank=True, help_text='The zone this job is associated with.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='jobs.Zone'),
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(help_text='A name for this pipeline. Must be unique to the project.', max_length=256)),
                ('definition', jsonfallback.fields.FallbackJSONField(help_text='The JSON definition of the pipeline.')),
                ('project', models.ForeignKey(blank=True, help_text='The project this pipeline is linked to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pipelines', to='projects.Project')),
                ('schedule', models.OneToOneField(blank=True, help_text='The schedule for this pipeline.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pipeline', to='jobs.PipelineSchedule')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='The time the job was created.', null=True)),
                ('began', models.DateTimeField(help_text='The time the job began.', null=True)),
                ('ended', models.DateTimeField(help_text='The time the job ended.', null=True)),
                ('status', models.CharField(blank=True, choices=[('DISPATCHED', 'DISPATCHED'), ('PENDING', 'PENDING'), ('RECEIVED', 'RECEIVED'), ('STARTED', 'STARTED'), ('RUNNING', 'RUNNING'), ('SUCCESS', 'SUCCESS'), ('FAILURE', 'FAILURE'), ('CANCELLED', 'CANCELLED'), ('REVOKED', 'REVOKED'), ('TERMINATED', 'TERMINATED'), ('REJECTED', 'REJECTED'), ('RETRY', 'RETRY')], help_text='The current status of the job.', max_length=32, null=True)),
                ('method', models.CharField(choices=[('parallel', 'parallel'), ('series', 'series'), ('chain', 'chain'), ('pull', 'pull'), ('push', 'push'), ('decode', 'decode'), ('encode', 'encode'), ('convert', 'convert'), ('compile', 'compile'), ('build', 'build'), ('execute', 'execute'), ('session', 'session'), ('sleep', 'sleep')], help_text='The job method.', max_length=32)),
                ('params', jsonfallback.fields.FallbackJSONField(blank=True, help_text='The parameters of the job; a JSON object.', null=True)),
                ('result', jsonfallback.fields.FallbackJSONField(blank=True, help_text='The result of the job; a JSON value.', null=True)),
                ('error', jsonfallback.fields.FallbackJSONField(blank=True, help_text='Any error associated with the job; a JSON object with type, message etc.', null=True)),
                ('log', jsonfallback.fields.FallbackJSONField(blank=True, help_text='The job log; a JSON array of log objects, including any errors.', null=True)),
                ('runtime', models.FloatField(blank=True, help_text='The running time of the job.', null=True)),
                ('url', models.CharField(blank=True, help_text='The URL of the job on the local network; can be used to interact with it.', max_length=256, null=True)),
                ('worker', models.CharField(blank=True, help_text='The identifier of the worker that ran the job.', max_length=64, null=True)),
                ('retries', models.IntegerField(blank=True, help_text='The number of retries to fulfil the job.', null=True)),
                ('creator', models.ForeignKey(blank=True, help_text='The user who created the job.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='jobs_created', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='The parent job', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='jobs.Job')),
                ('project', models.ForeignKey(blank=True, help_text='The project this job is associated with.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='projects.Project')),
                ('queue', models.ForeignKey(blank=True, help_text='The queue that this job was routed to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='jobs', to='jobs.Queue')),
                ('users', models.ManyToManyField(help_text='The users who have connected to the job; not necessarily currently connected.', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='zone',
            constraint=models.UniqueConstraint(fields=('account', 'name'), name='unique_name'),
        ),
    ]
