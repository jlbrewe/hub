/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */

import * as runtime from '../runtime';

export interface WorkersPartialUpdateRequest {
    hostname: string;
}

/**
 * 
 */
export class WorkersApi extends runtime.BaseAPI {

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Create a worker heartbeat.
     */
    async workersHeartbeatRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/workers/heartbeat/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Create a worker heartbeat.
     */
    async workersHeartbeat(): Promise<void> {
        await this.workersHeartbeatRaw();
    }

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Record that a worker has gone offline.
     */
    async workersOfflineRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/workers/offline/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Record that a worker has gone offline.
     */
    async workersOffline(): Promise<void> {
        await this.workersOfflineRaw();
    }

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Record that a worker has come online.
     */
    async workersOnlineRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/workers/online/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An internal route, intended primarily for the `overseer` service. Receives event data. Returns an empty response.
     * Record that a worker has come online.
     */
    async workersOnline(): Promise<void> {
        await this.workersOnlineRaw();
    }

    /**
     * An internal route, intended primarily for the `overseer` service and intended to be used once per worker put separately to `/online`. Receives data such as which virtual host and queues it is listening to. Returns an empty response.
     * Update information on the worker.
     */
    async workersPartialUpdateRaw(requestParameters: WorkersPartialUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hostname === null || requestParameters.hostname === undefined) {
            throw new runtime.RequiredError('hostname','Required parameter requestParameters.hostname was null or undefined when calling workersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/workers/{hostname}/`.replace(`{${"hostname"}}`, encodeURIComponent(String(requestParameters.hostname))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An internal route, intended primarily for the `overseer` service and intended to be used once per worker put separately to `/online`. Receives data such as which virtual host and queues it is listening to. Returns an empty response.
     * Update information on the worker.
     */
    async workersPartialUpdate(requestParameters: WorkersPartialUpdateRequest): Promise<void> {
        await this.workersPartialUpdateRaw(requestParameters);
    }

}
