/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */

import * as runtime from '../runtime';
import {
    AccountCreate,
    AccountCreateFromJSON,
    AccountCreateToJSON,
    AccountRetrieve,
    AccountRetrieveFromJSON,
    AccountRetrieveToJSON,
    AccountTeam,
    AccountTeamFromJSON,
    AccountTeamToJSON,
    AccountUpdate,
    AccountUpdateFromJSON,
    AccountUpdateToJSON,
    AccountUser,
    AccountUserFromJSON,
    AccountUserToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
    Queue,
    QueueFromJSON,
    QueueToJSON,
    Worker,
    WorkerFromJSON,
    WorkerToJSON,
    Zone,
    ZoneFromJSON,
    ZoneToJSON,
} from '../models';

export interface AccountsBrokerListRequest {
    account: string;
}

export interface AccountsCreateRequest {
    data: AccountCreate;
}

export interface AccountsListRequest {
    limit?: number;
    offset?: number;
}

export interface AccountsPartialUpdateRequest {
    account: string;
    data: AccountUpdate;
}

export interface AccountsQueuesListRequest {
    account: string;
    limit?: number;
    offset?: number;
}

export interface AccountsQueuesReadRequest {
    account: string;
    queue: string;
}

export interface AccountsReadRequest {
    account: string;
}

export interface AccountsTeamsCreateRequest {
    account: string;
}

export interface AccountsTeamsDeleteRequest {
    account: string;
    team: string;
}

export interface AccountsTeamsListRequest {
    account: string;
    limit?: number;
    offset?: number;
}

export interface AccountsTeamsMembersCreateRequest {
    account: string;
    team: string;
    data: InlineObject1;
}

export interface AccountsTeamsMembersDeleteRequest {
    account: string;
    team: string;
    user: string;
}

export interface AccountsTeamsPartialUpdateRequest {
    account: string;
    team: string;
    data: InlineObject;
}

export interface AccountsTeamsReadRequest {
    account: string;
    team: string;
}

export interface AccountsUpdatePlanRequest {
    account: string;
}

export interface AccountsUsersCreateRequest {
    account: string;
    data: InlineObject2;
}

export interface AccountsUsersDeleteRequest {
    account: string;
    user: string;
}

export interface AccountsUsersListRequest {
    account: string;
    limit?: number;
    offset?: number;
}

export interface AccountsUsersPartialUpdateRequest {
    account: string;
    user: string;
    data: AccountUser;
}

export interface AccountsUsersReadRequest {
    account: string;
    user: string;
}

export interface AccountsWorkersHeartbeatsListRequest {
    account: string;
    worker: string;
    limit?: number;
    offset?: number;
}

export interface AccountsWorkersListRequest {
    account: string;
    limit?: number;
    offset?: number;
}

export interface AccountsWorkersReadRequest {
    account: string;
    worker: string;
}

export interface AccountsZonesCreateRequest {
    account: string;
}

export interface AccountsZonesDeleteRequest {
    account: string;
    zone: string;
}

export interface AccountsZonesListRequest {
    account: string;
    limit?: number;
    offset?: number;
}

export interface AccountsZonesReadRequest {
    account: string;
    zone: string;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * This endpoint is for self-hosted workers. These need to be enabled for the account.  You may need to include your authentication token in the URL. For example, when using [Celery](https://www.celeryproject.org/) in Python:  ```python app = Celery(     broker=\"https://{token}@hub.stenci.la/api/accounts/{account}/jobs/broker\".format(         token = os.environ.get(\"STENCILA_TOKEN\"),         account = os.environ.get(\"STENCILA_ACCOUNT\")     ) ) ```
     * Connect to the job broker for the account.
     */
    async accountsBrokerListRaw(requestParameters: AccountsBrokerListRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsBrokerList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/broker`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint is for self-hosted workers. These need to be enabled for the account.  You may need to include your authentication token in the URL. For example, when using [Celery](https://www.celeryproject.org/) in Python:  ```python app = Celery(     broker=\"https://{token}@hub.stenci.la/api/accounts/{account}/jobs/broker\".format(         token = os.environ.get(\"STENCILA_TOKEN\"),         account = os.environ.get(\"STENCILA_ACCOUNT\")     ) ) ```
     * Connect to the job broker for the account.
     */
    async accountsBrokerList(requestParameters: AccountsBrokerListRequest): Promise<void> {
        await this.accountsBrokerListRaw(requestParameters);
    }

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async accountsCreateRaw(requestParameters: AccountsCreateRequest): Promise<runtime.ApiResponse<AccountCreate>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountCreateToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountCreateFromJSON(jsonValue));
    }

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async accountsCreate(requestParameters: AccountsCreateRequest): Promise<AccountCreate> {
        const response = await this.accountsCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsListRaw(requestParameters: AccountsListRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsList(requestParameters: AccountsListRequest): Promise<InlineResponse200> {
        const response = await this.accountsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the updated object.
     * Update an object.
     */
    async accountsPartialUpdateRaw(requestParameters: AccountsPartialUpdateRequest): Promise<runtime.ApiResponse<AccountUpdate>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountUpdateToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUpdateFromJSON(jsonValue));
    }

    /**
     * Returns data for the updated object.
     * Update an object.
     */
    async accountsPartialUpdate(requestParameters: AccountsPartialUpdateRequest): Promise<AccountUpdate> {
        const response = await this.accountsPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsQueuesListRaw(requestParameters: AccountsQueuesListRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsQueuesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/queues/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsQueuesList(requestParameters: AccountsQueuesListRequest): Promise<InlineResponse2001> {
        const response = await this.accountsQueuesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsQueuesReadRaw(requestParameters: AccountsQueuesReadRequest): Promise<runtime.ApiResponse<Queue>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsQueuesRead.');
        }

        if (requestParameters.queue === null || requestParameters.queue === undefined) {
            throw new runtime.RequiredError('queue','Required parameter requestParameters.queue was null or undefined when calling accountsQueuesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/queues/{queue}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"queue"}}`, encodeURIComponent(String(requestParameters.queue))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QueueFromJSON(jsonValue));
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsQueuesRead(requestParameters: AccountsQueuesReadRequest): Promise<Queue> {
        const response = await this.accountsQueuesReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsReadRaw(requestParameters: AccountsReadRequest): Promise<runtime.ApiResponse<AccountRetrieve>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountRetrieveFromJSON(jsonValue));
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsRead(requestParameters: AccountsReadRequest): Promise<AccountRetrieve> {
        const response = await this.accountsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the new team.
     * Create a team.
     */
    async accountsTeamsCreateRaw(requestParameters: AccountsTeamsCreateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns data for the new team.
     * Create a team.
     */
    async accountsTeamsCreate(requestParameters: AccountsTeamsCreateRequest): Promise<void> {
        await this.accountsTeamsCreateRaw(requestParameters);
    }

    /**
     * Returns an empty response.
     * Destroy a team.
     */
    async accountsTeamsDeleteRaw(requestParameters: AccountsTeamsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsDelete.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling accountsTeamsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/{team}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters.team))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an empty response.
     * Destroy a team.
     */
    async accountsTeamsDelete(requestParameters: AccountsTeamsDeleteRequest): Promise<void> {
        await this.accountsTeamsDeleteRaw(requestParameters);
    }

    /**
     * Returns a list of teams for the account.
     * List teams.
     */
    async accountsTeamsListRaw(requestParameters: AccountsTeamsListRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Returns a list of teams for the account.
     * List teams.
     */
    async accountsTeamsList(requestParameters: AccountsTeamsListRequest): Promise<InlineResponse2002> {
        const response = await this.accountsTeamsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add a user to the team.
     */
    async accountsTeamsMembersCreateRaw(requestParameters: AccountsTeamsMembersCreateRequest): Promise<runtime.ApiResponse<InlineObject1>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsMembersCreate.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling accountsTeamsMembersCreate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsTeamsMembersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/{team}/members/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters.team))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject1FromJSON(jsonValue));
    }

    /**
     * Add a user to the team.
     */
    async accountsTeamsMembersCreate(requestParameters: AccountsTeamsMembersCreateRequest): Promise<InlineObject1> {
        const response = await this.accountsTeamsMembersCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a user from the team.
     */
    async accountsTeamsMembersDeleteRaw(requestParameters: AccountsTeamsMembersDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsMembersDelete.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling accountsTeamsMembersDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling accountsTeamsMembersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/{team}/members/{user}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters.team))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from the team.
     */
    async accountsTeamsMembersDelete(requestParameters: AccountsTeamsMembersDeleteRequest): Promise<void> {
        await this.accountsTeamsMembersDeleteRaw(requestParameters);
    }

    /**
     * Returns data for the team.
     * Update a team.
     */
    async accountsTeamsPartialUpdateRaw(requestParameters: AccountsTeamsPartialUpdateRequest): Promise<runtime.ApiResponse<InlineObject>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsPartialUpdate.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling accountsTeamsPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsTeamsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/{team}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters.team))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObjectFromJSON(jsonValue));
    }

    /**
     * Returns data for the team.
     * Update a team.
     */
    async accountsTeamsPartialUpdate(requestParameters: AccountsTeamsPartialUpdateRequest): Promise<InlineObject> {
        const response = await this.accountsTeamsPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the team.
     * Retrieve a team.
     */
    async accountsTeamsReadRaw(requestParameters: AccountsTeamsReadRequest): Promise<runtime.ApiResponse<AccountTeam>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsTeamsRead.');
        }

        if (requestParameters.team === null || requestParameters.team === undefined) {
            throw new runtime.RequiredError('team','Required parameter requestParameters.team was null or undefined when calling accountsTeamsRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/teams/{team}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"team"}}`, encodeURIComponent(String(requestParameters.team))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTeamFromJSON(jsonValue));
    }

    /**
     * Returns data for the team.
     * Retrieve a team.
     */
    async accountsTeamsRead(requestParameters: AccountsTeamsReadRequest): Promise<AccountTeam> {
        const response = await this.accountsTeamsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the plan / tier for an account.
     */
    async accountsUpdatePlanRaw(requestParameters: AccountsUpdatePlanRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUpdatePlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/update_plan/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the plan / tier for an account.
     */
    async accountsUpdatePlan(requestParameters: AccountsUpdatePlanRequest): Promise<void> {
        await this.accountsUpdatePlanRaw(requestParameters);
    }

    /**
     * Returns data for the new account user.
     * Add an account user.
     */
    async accountsUsersCreateRaw(requestParameters: AccountsUsersCreateRequest): Promise<runtime.ApiResponse<InlineObject2>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUsersCreate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsUsersCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/users/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineObject2FromJSON(jsonValue));
    }

    /**
     * Returns data for the new account user.
     * Add an account user.
     */
    async accountsUsersCreate(requestParameters: AccountsUsersCreateRequest): Promise<InlineObject2> {
        const response = await this.accountsUsersCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an empty response.
     * Remove an account user.
     */
    async accountsUsersDeleteRaw(requestParameters: AccountsUsersDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUsersDelete.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling accountsUsersDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/users/{user}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an empty response.
     * Remove an account user.
     */
    async accountsUsersDelete(requestParameters: AccountsUsersDeleteRequest): Promise<void> {
        await this.accountsUsersDeleteRaw(requestParameters);
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersListRaw(requestParameters: AccountsUsersListRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUsersList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/users/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersList(requestParameters: AccountsUsersListRequest): Promise<InlineResponse2003> {
        const response = await this.accountsUsersListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersPartialUpdateRaw(requestParameters: AccountsUsersPartialUpdateRequest): Promise<runtime.ApiResponse<AccountUser>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUsersPartialUpdate.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling accountsUsersPartialUpdate.');
        }

        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('data','Required parameter requestParameters.data was null or undefined when calling accountsUsersPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/users/{user}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AccountUserToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUserFromJSON(jsonValue));
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersPartialUpdate(requestParameters: AccountsUsersPartialUpdateRequest): Promise<AccountUser> {
        const response = await this.accountsUsersPartialUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersReadRaw(requestParameters: AccountsUsersReadRequest): Promise<runtime.ApiResponse<AccountUser>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsUsersRead.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling accountsUsersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/users/{user}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUserFromJSON(jsonValue));
    }

    /**
     * Provides basic CRUD views for account users.
     * A view set for account users.
     */
    async accountsUsersRead(requestParameters: AccountsUsersReadRequest): Promise<AccountUser> {
        const response = await this.accountsUsersReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsWorkersHeartbeatsListRaw(requestParameters: AccountsWorkersHeartbeatsListRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsWorkersHeartbeatsList.');
        }

        if (requestParameters.worker === null || requestParameters.worker === undefined) {
            throw new runtime.RequiredError('worker','Required parameter requestParameters.worker was null or undefined when calling accountsWorkersHeartbeatsList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/workers/{worker}/heartbeats/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"worker"}}`, encodeURIComponent(String(requestParameters.worker))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsWorkersHeartbeatsList(requestParameters: AccountsWorkersHeartbeatsListRequest): Promise<InlineResponse2005> {
        const response = await this.accountsWorkersHeartbeatsListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsWorkersListRaw(requestParameters: AccountsWorkersListRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsWorkersList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/workers/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsWorkersList(requestParameters: AccountsWorkersListRequest): Promise<InlineResponse2004> {
        const response = await this.accountsWorkersListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsWorkersReadRaw(requestParameters: AccountsWorkersReadRequest): Promise<runtime.ApiResponse<Worker>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsWorkersRead.');
        }

        if (requestParameters.worker === null || requestParameters.worker === undefined) {
            throw new runtime.RequiredError('worker','Required parameter requestParameters.worker was null or undefined when calling accountsWorkersRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/workers/{worker}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"worker"}}`, encodeURIComponent(String(requestParameters.worker))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkerFromJSON(jsonValue));
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsWorkersRead(requestParameters: AccountsWorkersReadRequest): Promise<Worker> {
        const response = await this.accountsWorkersReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async accountsZonesCreateRaw(requestParameters: AccountsZonesCreateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsZonesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/zones/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns data for the new object.
     * Create an object.
     */
    async accountsZonesCreate(requestParameters: AccountsZonesCreateRequest): Promise<void> {
        await this.accountsZonesCreateRaw(requestParameters);
    }

    /**
     * Returns an empty response.
     * Destroy an object.
     */
    async accountsZonesDeleteRaw(requestParameters: AccountsZonesDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsZonesDelete.');
        }

        if (requestParameters.zone === null || requestParameters.zone === undefined) {
            throw new runtime.RequiredError('zone','Required parameter requestParameters.zone was null or undefined when calling accountsZonesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/zones/{zone}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"zone"}}`, encodeURIComponent(String(requestParameters.zone))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns an empty response.
     * Destroy an object.
     */
    async accountsZonesDelete(requestParameters: AccountsZonesDeleteRequest): Promise<void> {
        await this.accountsZonesDeleteRaw(requestParameters);
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsZonesListRaw(requestParameters: AccountsZonesListRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsZonesList.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/zones/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * Returns a list of objects.
     * List objects.
     */
    async accountsZonesList(requestParameters: AccountsZonesListRequest): Promise<InlineResponse2006> {
        const response = await this.accountsZonesListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsZonesReadRaw(requestParameters: AccountsZonesReadRequest): Promise<runtime.ApiResponse<Zone>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling accountsZonesRead.');
        }

        if (requestParameters.zone === null || requestParameters.zone === undefined) {
            throw new runtime.RequiredError('zone','Required parameter requestParameters.zone was null or undefined when calling accountsZonesRead.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        const response = await this.request({
            path: `/accounts/{account}/zones/{zone}/`.replace(`{${"account"}}`, encodeURIComponent(String(requestParameters.account))).replace(`{${"zone"}}`, encodeURIComponent(String(requestParameters.zone))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ZoneFromJSON(jsonValue));
    }

    /**
     * Returns data for the object.
     * Retrieve an object.
     */
    async accountsZonesRead(requestParameters: AccountsZonesReadRequest): Promise<Zone> {
        const response = await this.accountsZonesReadRaw(requestParameters);
        return await response.value();
    }

}
