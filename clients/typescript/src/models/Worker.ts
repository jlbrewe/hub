/* tslint:disable */
/* eslint-disable */

/**
 * Stencila Hub Typescript Client
 *
 * This file is auto generated by OpenAPI Generator. Do not edit manually.
 */
import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Worker
 */
export interface Worker {
    /**
     * 
     * @type {number}
     * @memberof Worker
     */
    readonly id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Worker
     */
    readonly active?: boolean;
    /**
     * The time that the worker started (time of the first event for the worker).
     * @type {Date}
     * @memberof Worker
     */
    readonly created?: Date;
    /**
     * The time that the worker started (only recorded on a 'worker-online' event).
     * @type {Date}
     * @memberof Worker
     */
    started?: Date | null;
    /**
     * The time that the last heatbeat was received for the worker.
     * @type {Date}
     * @memberof Worker
     */
    updated?: Date | null;
    /**
     * The time that the worker finished (only recorded on a 'worker-offline' event)
     * @type {Date}
     * @memberof Worker
     */
    finished?: Date | null;
    /**
     * The `hostname` of the worker.
     * @type {string}
     * @memberof Worker
     */
    hostname: string;
    /**
     * The `utcoffset` of the worker.
     * @type {number}
     * @memberof Worker
     */
    utcoffset?: number | null;
    /**
     * The `pid` of the worker.
     * @type {number}
     * @memberof Worker
     */
    pid?: number | null;
    /**
     * The worker's heatbeat frequency (in seconds)
     * @type {number}
     * @memberof Worker
     */
    freq?: number | null;
    /**
     * The name and version of the worker's software.
     * @type {string}
     * @memberof Worker
     */
    software?: string | null;
    /**
     * Operating system that the worker is running on.
     * @type {string}
     * @memberof Worker
     */
    os?: string | null;
    /**
     * Details about the worker including queues and statsSee https://docs.celeryproject.org/en/stable/userguide/workers.html#statistics
     * @type {string}
     * @memberof Worker
     */
    details?: string | null;
    /**
     * The signature of the worker used to identify it. It is possible, but unlikely, that two or more active workers have the same signature.
     * @type {string}
     * @memberof Worker
     */
    signature?: string | null;
    /**
     * The queues that this worker is listening to.
     * @type {Set<number>}
     * @memberof Worker
     */
    queues: Set<number>;
}

export function WorkerFromJSON(json: any): Worker {
    return WorkerFromJSONTyped(json, false);
}

export function WorkerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Worker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'started': !exists(json, 'started') ? undefined : (json['started'] === null ? null : new Date(json['started'])),
        'updated': !exists(json, 'updated') ? undefined : (json['updated'] === null ? null : new Date(json['updated'])),
        'finished': !exists(json, 'finished') ? undefined : (json['finished'] === null ? null : new Date(json['finished'])),
        'hostname': json['hostname'],
        'utcoffset': !exists(json, 'utcoffset') ? undefined : json['utcoffset'],
        'pid': !exists(json, 'pid') ? undefined : json['pid'],
        'freq': !exists(json, 'freq') ? undefined : json['freq'],
        'software': !exists(json, 'software') ? undefined : json['software'],
        'os': !exists(json, 'os') ? undefined : json['os'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'signature': !exists(json, 'signature') ? undefined : json['signature'],
        'queues': json['queues'],
    };
}

export function WorkerToJSON(value?: Worker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'started': value.started === undefined ? undefined : (value.started === null ? null : value.started.toISOString()),
        'updated': value.updated === undefined ? undefined : (value.updated === null ? null : value.updated.toISOString()),
        'finished': value.finished === undefined ? undefined : (value.finished === null ? null : value.finished.toISOString()),
        'hostname': value.hostname,
        'utcoffset': value.utcoffset,
        'pid': value.pid,
        'freq': value.freq,
        'software': value.software,
        'os': value.os,
        'details': value.details,
        'signature': value.signature,
        'queues': value.queues,
    };
}


